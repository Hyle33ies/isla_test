# Before any match clause, there should be at least one create clause.
forall <match_clause> match:
  exists <create_clause> create: before(create, match)

# Before matching a node with a specific label, 
# the node with that label should have been created.
forall <match_clause> match:
  exists <create_clause> create: (
    before(create, match) and 
    match.<pattern>.<node_pattern>.<label_opt>.<label> = create.<pattern>.<node_pattern>.<label_opt>.<label>)

# Before matching a node with a specific property, 
# the node with that property should have been created.
forall <match_clause> match:
  exists <create_clause> create: (
    before(create, match) and 
    match.<pattern>.<node_pattern>.<properties>.<property_list>.<property>.<property_string> = create.<pattern>.<node_pattern>.<properties>.<property_list>.<property>.<property_string>)

# Before matching a relationship with a specific type, 
# the relationship with that type should have been created.
forall <match_clause> match:
  exists <create_clause> create: (
    before(create, match) and 
    match.<pattern>.<relationship_pattern>.<type> = create.<pattern>.<relationship_pattern>.<type>)

# Before matching a relationship with a specific property, 
# the relationship with that property should have been created.
forall <match_clause> match:
  exists <create_clause> create: (
    before(create, match) and 
    match.<pattern>.<relationship_pattern>.<properties>.<property_list>.<property>.<property_string> = create.<pattern>.<relationship_pattern>.<properties>.<property_list>.<property>.<property_string>)

# Before using a variable in the return clause, 
# the variable should have been declared.
forall <return_clause> return:
  exists <create_clause> crte: (
    before(crte, return) and 
    return.<return_items>.<return_item>.<node_variable> = crte.<pattern>.<node_pattern>.<node_variable>)

forall <return_clause> return:
  exists <match_clause> mth: (
    before(mth, return) and 
    return.<return_items>.<return_item>.<node_variable> = mth.<pattern>.<node_pattern>.<node_variable>)

# Variables used in different match and create clauses should be unique to avoid ambiguity.
forall <statement> stmt1, <statement> stmt2:
  stmt1 != stmt2 implies (
    stmt1.<match_clause>.<pattern>.<node_pattern>.<node_variable> != stmt2.<match_clause>.<pattern>.<node_pattern>.<node_variable>)

forall <statement> stmt1, <statement> stmt2:
  stmt1 != stmt2 implies (
    stmt1.<create_clause>.<pattern>.<node_pattern>.<node_variable> != stmt2.<create_clause>.<pattern>.<node_pattern>.<node_variable>)

# Before using a DELETE clause, the variables to be deleted should have been previously defined in a CREATE or MATCH clause.
forall <delete_clause> delete:
  forall delete.<delete_items>.<node_variable> var:
    exists <statement> stmt: (
      before(stmt, delete) and 
       var = stmt.<create_clause>.<pattern>.<node_pattern>.<node_variable>)

# Before using a SET clause, the variables to be set should have been previously defined in a CREATE or MATCH clause.
forall <set_clause> set:
  forall set.<set_items>.<set_item>.<node_variable> var:
    exists <create_clause> crte: (
      before(crte, set) and 
      var = crte.<pattern>.<node_pattern>.<node_variable>
    )

# Node names (variables) should not conflict with labels.
forall <node_pattern> node:
  node.<node_variable> != node.<label_opt>.<label>

# Node names (variables) should not conflict with relationship names (types).
forall <node_pattern> node, <relationship_pattern> rel:
  node.<node_variable> != rel.<type>

# Relationship names (types) should not conflict with labels.
forall <relationship_pattern> rel, <node_pattern> node:
  rel.<type> != node.<label_opt>.<label>
